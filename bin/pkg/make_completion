#!/usr/bin/env python

import sys
import os
import datetime

pathsvc = os.path.realpath(os.path.join(os.path.dirname(__file__), '..', '..'))
pathlib = os.path.join(pathsvc, "opensvc")
completion_fpath = os.path.join(pathsvc, "usr", "share", "bash_completion.d", "opensvc.sh")

sys.path.insert(0, pathlib)

import commands.mgr.parser
import commands.svcmgr.parser
import commands.nodemgr.parser

template = """

%(lists)s

om="setns getns unsetns node cluster svc vol net pool daemon array"

opt_has_arg()
{
    for option in ${opts_with_arg[@]}
    do
        if [ "$option" == "$1" ]
        then
            return 0
        fi
    done
    return 1
}

_comp_handler() 
{
    local a prev action opts
    COMPREPLY=()
    exe="${COMP_WORDS[0]}"
    COMP_WORDS[0]="${exe##*/}"
    a="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [ $COMP_CWORD -eq 1 -a "${COMP_WORDS[0]}" == "om" ]
    then
        svcs=$(cat /var/lib/opensvc/list.services /opt/opensvc/var/list.services 2>/dev/null)
        COMPREPLY=( $(compgen -W "$om $svcs" -- ${a}) )
        return 0
    fi

    case "${prev}" in
        --color)
            COMPREPLY=( $(compgen -W "yes no" -- ${a}) )
            return 0
            ;;
        --format)
            COMPREPLY=( $(compgen -W "csv flat_json json table" -- ${a}) )
            return 0
            ;;
        --service|-s)
            svcs=$(cat /var/lib/opensvc/list.services /opt/opensvc/var/list.services 2>/dev/null)
            COMPREPLY=( $(compgen -W "${svcs}" -- ${a}) )
            return 0
            ;;
        --node)
            nodes=$(cat /var/lib/opensvc/list.nodes /opt/opensvc/var/list.nodes 2>/dev/null)
            COMPREPLY=( $(compgen -W "${nodes}" -- ${a}) )
            return 0
            ;;
        *)
            ;;
    esac

    case "${COMP_WORDS[0]} ${COMP_WORDS[1]} "
    in
        "om node ")
            unset COMP_WORDS[0]
            COMP_WORDS[0]="nodemgr"
            COMP_CWORD=${COMP_CWORD-1}
            ;;
        "om net ")
            COMP_WORDS[0]="nodemgr"
            COMP_WORDS[1]="network"
            ;;
        "om pool ")
            COMP_WORDS[0]="nodemgr"
            ;;
        "om daemon "|"om array ")
            COMP_WORDS[0]="nodemgr"
            ;;
        "om svc "|"om vol ")
            unset COMP_WORDS[0]
            COMP_WORDS[0]="svcmgr"
            COMP_CWORD=${COMP_CWORD-1}
            ;;
        "om getns "|"om setns "|"om unsetns ")
            ;;
        "om  ")
            ;;
        om\ *)
            if [ $COMP_CWORD -ge 2 ]
            then
                COMP_WORDS[0]="svcmgr"
                unset COMP_WORDS[1]
            fi
            ;;
    esac

    action=()
    typeset -i skip=0

    for word in ${COMP_WORDS[@]}
    do
        # prevent "Bad substitution" on action deref
        word=${word//[^abcdefghijklmnopqrstuvwxyz0-9_.]/}
        if [ "${word#-}" != "${word}" ]
        then
            opt_has_arg ${word} && skip=1
        elif [ $skip -eq 1 ]
        then
            skip=0
        else
            action+=(${word})
        fi
    done

    action="${action[@]}"
    action="${action// /_}"
    prev_action=""
    opts=""

    while [ "$action" != "" -a "$opts" == "" -a "$prev_action" != "$action" ]
    do
        opts="${!action}"
        prev_action="$action"
        action=${action%%_*}
    done

    extra_opts="${!action}"
    if [ "$a" != "" -a "$opts" != "" ]
    then
        opts="$opts $extra_opts"
    fi

    COMPREPLY=($(compgen -W "${opts}" -- ${a}))

    return 0
}

complete -F _comp_handler svcmgr
complete -F _comp_handler nodemgr
complete -F _comp_handler om

"""

def do_prog_lists(prog, actions, global_opts, deprecated_options, opts):
    buff =""
    data = {}
    for section in actions:
        for action in actions[section]:
            elements = [prog] + action.split("_")
            n_elements = len(elements)
            for i in range(n_elements-1):
                prefix = "_".join(elements[:i+1])
                suffix = set([elements[i+1]])
                if prefix not in data:
                    data[prefix] = set()
                data[prefix] |= suffix

    for prefix in sorted(data):
        suffix = data[prefix]
        candidates = sorted(list(suffix))
        candidates = " ".join(candidates)
        buff += '%s="%s"\n' % (prefix, candidates)
        
    for section in actions:
        for action in actions[section]:
            l = actions[section][action].get("options", []) + global_opts
            for name in deprecated_options:
                opt = opts[name]
                try:
                    l.remove(opt)
                except ValueError:
                    pass
            options = [str(opt) for opt in l]
            options = " ".join(sorted(options))
            options = options.replace("/", " ")
            action = prog + "_" + action
            buff += '%s="%s"\n' % (action, options)

    return buff

def do_opts_with_arg():
    opts_with_arg = set()
    for section in commands.svcmgr.parser.ACTIONS:
        for action in commands.svcmgr.parser.ACTIONS[section]:
            l = commands.svcmgr.parser.ACTIONS[section][action].get("options", []) + commands.mgr.parser.GLOBAL_OPTS
            for name in commands.svcmgr.parser.DEPRECATED_OPTIONS:
                opt = commands.svcmgr.parser.OPT[name]
                try:
                    l.remove(opt)
                except ValueError:
                    pass
            for opt in l:
                if opt.action not in ("store", "append"):
                    continue
                opts_with_arg |= set(str(opt).split("/"))
    for section in commands.nodemgr.parser.ACTIONS:
        for action in commands.nodemgr.parser.ACTIONS[section]:
            l = commands.nodemgr.parser.ACTIONS[section][action].get("options", []) + commands.nodemgr.parser.GLOBAL_OPTS
            for name in commands.nodemgr.parser.DEPRECATED_OPTIONS:
                opt = commands.svcmgr.parser.OPT[name]
                try:
                    l.remove(opt)
                except ValueError:
                    pass
            for opt in l:
                if opt.action not in ("store", "append"):
                    continue
                opts_with_arg |= set(str(opt).split("/"))

    buff = "\nopts_with_arg=( %s )\n\n" % (
        ' '.join(sorted(['"'+opt+'"' for opt in opts_with_arg])),
    )

    return buff

def do_lists():
    buff = ""
    buff += do_prog_lists("svcmgr", commands.svcmgr.parser.ACTIONS, commands.mgr.parser.GLOBAL_OPTS, commands.svcmgr.parser.DEPRECATED_OPTIONS, commands.svcmgr.parser.OPT)
    buff += do_prog_lists("nodemgr", commands.nodemgr.parser.ACTIONS, commands.nodemgr.parser.GLOBAL_OPTS, commands.nodemgr.parser.DEPRECATED_OPTIONS, commands.nodemgr.parser.OPT)
    buff += do_opts_with_arg()
    return buff

def write(buff):
    print "writing", completion_fpath
    with open(completion_fpath, "w") as f:
        f.write(buff)

def main():
    buff = template % dict(lists=do_lists())
    write(buff)

if __name__ == "__main__":
    main()

